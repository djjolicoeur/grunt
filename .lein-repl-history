(parser "CREATE TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "CREATE TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "CREATE TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "CREATE TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "CREATE TABLE hello;")
(parser CREATE TABLE hello;)
""
)))))
(parser "CREATE TABLE hello;")
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(parser "--hello\n;")
(parser "- -hello\n;")
(parser "/* hello */")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "/* hello */")
(parser "/*! ALTER TABLE */")
(parser "/*! ALTER TABLE */;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "/* ALTER TABLE */")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "/* ALTER TABLE */")
(require :reload '[sql2liquibase.parser :as p])
p/p-test "/*")
(p/p-test "/*")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "/* ALTER TABLE */")
(p/p-test "/*")
(require :reload '[sql2liquibase.parser :as p])
(parser "/* ALTER TABLE */")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "/* ALTER TABLE */")
(parser "- -hello\n;")
(parser "SET TABLE hello;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE hello;")
(parser "- -hello\n;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "- -hello\n;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "- -hello\n;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "- -hello\n;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "- -hello\n;")
(parser "- -hello\n")
(parser "--hello\n")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "--hello\n")
(parser "SET TABLE do something ;
")
(parser "SET TABLE do something;)
"))
(parser "SET TABLE do something;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE do something;")
(parser "SET TABLE do something ;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE do something ;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE do something ;")
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do something ;")
(parser "SET TABLE do something ;;")
(parser "SET TABLE do; something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do; something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do; something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do; something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do; something ;;")
(parser "SET TABLE do something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do something ;;")
#'(.(?!\!!|\\s))$'
#'(.(?!;;|\\s))$'
))))
#"(.(?!;;|\\s))$"
(re-find #"^(.(?!;;|\\s))$" "hello")
(re-find #"^(.(?!;;|\\s))$" "hello;;")
(re-find #"[^;\\s]" "hello")
(re-find #"[^(;;)\\s]" "hello")
(re-find #"[^\\s]" "hello")
(re-find #"[^(;;)\\s]*" "hello")
(re-find #"[^(;;)\\s]*" "hello;;")
(re-find #"[^(;;)\\s]*" "hello;")
(re-find #"[^(;;)\\s]*" "he llo;")
(re-find #"[^(;;)^\\s]*" "he llo;")
(re-find #"[^(;;)]*" "he llo;")
(re-find #"[^(;;)]*" "he llo;;")
(re-find #"[^(;;)\\s]*" "he llo")
(re-find #"[\\s]*" "he llo")
(re-find #"[^\\s]*" "he llo")
(re-find #"[^\s]*" "he llo")
(re-find #"[^(;;)^\s]*" "he llo")
(re-find #"[^(;;)^\s]*" "he; llo")
(re-find #"[^';;'^\s]*" "he; llo")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do something ;;")
(parser "SET TABLE do; something ;;")
(re-find #"^(.(?!;;|\\s))$" "hello;;")
(re-find #"(.(?!;;|\\s))$" "hello;;")
(re-find #"(.(?!;;|\\s))$" "he llo;;")
(re-find #"(.(?!;;|\\s))" "he llo;;")
(re-find #"(.(?!;;|\\s))" "he llo ;;")
(re-find #"^(.(?!;;|\\s))$" "he llo ;;")
(re-find #"^(.(?!;;|\\s))$" "he llo;;")
(re-find #"^(.(?!;;|\\s))$" "hello")
(re-find #"^(.(?!;;|\\s))$*" "hello")
(re-find #"[^(.(?!;;|\\s))$]*" "hello")
(re-find #"[^(.(?!;;|\\s))$]*" "hello;;")
(re-find #"^(?!.*;;|\\s)" "hello;;")
(re-find #"^(?!.*;;|\\s)" "hello")
(re-find #"^(?!.*;;|\\s)" "hello  ")
(re-find #"^(?!.*;;|\\s)" "hello;;")
(re-find #"(?!;;|\\s)*" "hello;;")
(re-find #"(?!;;|\\s)*" "hello")
(re-find #"[(?!;;|\\s)]*" "hello")
(re-find #"^((?!;;).)*$ " "hello")
(re-find #"^((?!;;).)*$" "hello")
(re-find #"^((?!;;).)*$" "hello;;")
(re-find #"^((?!;;)[^\\s].)*$" "hello;;")
(re-find #"^((?!;;)[^\\s].)*$" "hello")
(re-find #"^((?!;;)(?!\\s).)*$" "hello")
(re-find #"^((?!;;)(?!\\s).)*$" "hell o")
(re-find #"^((?!;;)(?!\s).)*$" "hell o")
(re-find #"^((?!;;)(?!\s).)*$" "hello")
(re-find #"^((?!;;)(?!\s).)*$" "hello;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do; something ;;")
(parser "SET TABLE do something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do something ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do something ;;")
(re-find #"(^((?!;;).)*$ [\\s]*)" "hello;;")
(re-find #"(^((?!;;).)*$ [\\s]*)" "hello")
(re-find #"(^((?!;;).)*$ | [\\s]*)" "hello")
(re-find #"(^((?!;;).)*$ && [\\s]*)" "hello")
(re-find #"(^((?!;;).)*$ & [\\s]*)" "hello")
(re-find #"^((?!;;)(?!\s).)*$" "hello;;")
(re-find #"^((?!;;)(?!\s).)*$" "hello")
(re-find #"^((?!;;)(?!\s).)*$" "SET TABLE do something ;;")
(re-find #"^((?!;;)(?!\s).)*$" "TABLE")
(re-matches #"^((?!;;)(?!\s).)*$" "TABLE")
(re-matches #"^((?!;;|?!\s).)*$" "TABLE")
(re-matches #"^((?!;;|\s).)*$" "TABLE")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do something ;;")
(re-matches #"^((?!;;|\s).)*$" "TABLE")
(re-matches #"^((?!;;|\s).)*$" "TA BLE")
(re-matches #"^((?!;;|\s).)*$" "TABLE;;")
(re-matches #"^((?!;;|\s).)*$" " ")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE do something;")
(re-match #"(^((?!;|\s).)*$)" "TABLE")
(re-find #"(^((?!;|\s).)*$)" "TABLE")
(re-find #"(^((?!;|\s).)*$)" "TABLE ")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE do something;")
(parser "SET TABLE;")
(parser "SET;")
(parser "SET ;")
(parser "SET table;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE;")
(parser "SET TABLE ;")
(re-find #"^((?!;|\s).)*$" "TABLE ")
(re-find #"^((?!;|\s).)*$" "TABLE")
(re-find #"^(?!;|\s).*$" "TABLE")
(re-find #"^(?!;|\s).*$" "TABLE ")
(re-find #"^(?!;|\s).*$" "TABLE;")
(re-find #"(?!;|\s).*)" "TABLE;")
(re-find #"(?!;|\s).)" "TABLE;")
(re-find #"(?!;|\s).*" "TABLE;")
(re-find #"^(?!;|\s).*$" "TABLE;")
(re-find #"^((?!;|\s).)*$" "TABLE;")
(re-find #"^((?!;|\s).)*$" "TABLE ;")
(re-find #"^((?!;|\s).)*$" "TABLE ")
(re-find #"^((?!;|\s).)*$" "TABLE")
(re-matcher #"^((?!;|\s).)*$" "TABLE")
(.lookingAt (re-matcher #"^((?!;|\s).)*$" "TABLE"))
(.lookingAt (re-matcher #"^((?!;|\s).)*$" "TABLE "))
(.lookingAt (re-matcher #"^((?!;|\s).)*$" "TABLE;"))
(.lookingAt (re-matcher #"^((?!;|\s).)*$" "TABLE"))
(.group (re-matcher #"^((?!;|\s).)*$" "TABLE"))
(.lookingAt (re-matcher #"^((?!;|\s).)*$" "TABLE"))
(def matcher (re-matcher #"^((?!;|\s).)*$" "TABLE"))
(.lookingAt matcher)
(.group matcher)
(def matcher (re-matcher #"^((?!;|\s).)*$" "TABLE "))
(.group matcher)
(.lookingAt matcher)
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE;")
(parser "SET TABLE ;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE ;")
(parser "SET TABLE;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "SET TABLE;")
(parser "SET TABLE ;")
(parser "SET TABLE ;;")
(parser "SET TABLE ;")
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do; haste;;")
(parser "SET TABLE do; haste ;;")
(parser "SET TABLE do ; haste ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do ; haste ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do ; haste ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do ; haste ;;")
(parser "SET TABLE do ; haste;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do ; haste;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do ; haste;;")
(parser "SET TABLE do ; haste ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do ; haste ;;")
(parser "SET TABLE do haste ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do haste ;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "SET TABLE do haste ;;")
(parser "SET TABLE do; haste ;;")
(parser "/*comment*/")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(def parser (p/mk-parser ";;"))
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(def matcher (re-match #"^((?!;;|\s|\*/).)*$" "comment*/"))
(def matcher (re-matcher #"^((?!;;|\s|\*/).)*$" "comment*/"))
(.lookingAt matcher)
(def matcher (re-matcher #"^((?!;;|\s|\*/).)*$" "comment"))
(.lookingAt matcher)
(def matcher (re-matcher #"^((?!;;|\s|\*/).)*$" "comment */"))
(.lookingAt matcher)
(def matcher (re-matcher #"^((?!;;|\s|\*/).)*" "comment*/"))
(.lookingAt matcher)
(.group matcher)
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";;"))
(parser "/*comment*/")
(parser "SET TABLE do; it;;")
(parser "--coment")
(parser "--coment\n")
(parser "CREATE TRIGGER do some stuff; END;;")
(parser "SET TABLE do; it;;")
(parser "CREATE TRIGGER do some stuff; END;;")
(parser "CREATE TRIGGER do some stuff; END ;;")
(parser "CREATE TRIGGER do some stuff; END   ;;")
(parser "CREATE TRIGGER do some stuff; END\n;;")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser "CREATE TRIGGER do some stuff;\nDELIMITER ;;")
(parser "CREATE TRIGGER do some stuff;")
(parser "DELIMITER ;;;")
(parser "DELIMITER ;;")
(parser "DELIMITER $$")
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser p/statement)
(require :reload '[sql2liquibase.parser :as p])
(def parser (p/mk-parser ";"))
(parser p/statement)
(require :reload '[sql2liquibase.parser :as p])
(parser "/Users/djolicoeur/sql_test.sql")
(parse-file "/Users/djolicoeur/sql_test.sql")
(p/parse-file "/Users/djolicoeur/sql_test.sql")
(require :reload '[sql2liquibase.parser :as p])
(p/parse-file "/Users/djolicoeur/sql_test.sql")
(require :reload '[sql2liquibase.parser :as p])
(p/parse-file "/Users/djolicoeur/sql_test.sql")
(use clojure.pprint)
(use 'clojure.pprint)
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(reduce str '(
"a" "b" "c")
)
(defn t [& args] (reduce str args))
(t "a")
(t "a" "b")
(t '("a" "b"))
(defn t [& args] (apply reduce str args))
(t '("a" "b"))
(t "a")
(defn t [& args] (.toString (apply reduce str args)))
(t "a")
(defn t [& args] (.toString (apply reduce str args)))
(t '("a" "b"))
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(pprint (transorm (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(t "a" "b" "c")
(defn t [& args] (.toString (reduce str args)))
(t "a" "b" "c")
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/parse-file "/Users/djolicoeur/sql_test.sql"))
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(def np (p/mk-parser ";;"))
(np " CREATE TRIGGER blah\nEND$$)
")
(np " CREATE TRIGGER blah\nEND$$")
(np " CREATE TRIGGER blah\nEND;;")
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(np "\n CREATE TRIGGER blah\nEND;;")
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(atom tt)
(atom tt nil)
(def trans (atom nil)
)
(reset! trans (fn [x] (inc x)))
(trans 1)
(@trans 1)
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(fn ([x] (inc x)) ([x y] (+ x y)))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload '[sql2liquibase.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(def p (p/mk-parser "$$"))
(p "CREATE TABLE hello$$")
(p "CREATE TABLE hello $$")
(require  '[grunt.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
(require :reload  '[grunt.parser :as p])
(pprint (p/transform (p/parse-file "/Users/djolicoeur/sql_test.sql")))
